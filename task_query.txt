const express = require('express')
const app = express()
const details = require('../dao/operation');
const responseText = require('../responseText')

app.use(express.json())
const showStudents = async (req, res) => {
    let detail = await details.getStudents();
    if (detail && detail.length > 0) {
        return res.send({...responseText.studentsFetchedSuccessfully,data:detail});    }
    else {
        return res.send(responseText.noDataToFetch)
    }
    
};
const getOne = async (req, res) => {
    const id = req.query.id;
    let detail = await details.getStudentsById(id);
    try {
        if (detail) {
           return res.send({...responseText.getOneStudent,data:detail})
        }
        else {
            return res.send({...responseText.noDataToFetch})
        }
    } 
    catch (err) {
        res
        .status(500)
        // .json(responseText.catchOne)
    }
    
};
const create = async (req, res) => {
    const { fname, lname, marks, email } = req.body;
    try {
       
        if (!fname) {
            res.status(500).json(responseText.noFirst);
        }
        if (!email) {
            res.status(500).json(responseText.noEmail);
        }
        await details.createDetails(fname, lname, email, marks);
    res.status(201).json({
      student: {
        fname,
        lname,
        email,
      },
      marks,
      Message: "Student name with their marks created successfully",
    });
    }
    catch (err) {
        if (err.message === "Email should be unique.") {
            return res.status(400).json({ Message: err.message });
          }
      
        res
        .status(500)
        .json({ message: "Error in invocation of API: /create" })
    }
    await details.createDetails(fname, lname, email, marks)
};

const destroy = async (req, res) => {

    const id = req.query.id;
    try {
        let detail = await details.deleteById(id)
        if (detail) {
           return res.send({...responseText.deleted,count : detail})
        }
        else {
           return res.send(responseText.noDataToDelete)
        }
    } catch (err) {
       res
            .status(500)
            .json({ message: "Error in invocation of API: /delete" })
    }
};

const updateDetails = async (req, res) => {
    const { email, updatedMarks, updateName } = req.body;
    try {
        if (email) { res.status(200).json({ message: 'Marks updated successfully' }); }
        if (!email) {
            res.status(500).json({
                Message: "Please provide the email of the student to update the marks"
            });
        }
    }
    catch (err) {
        res
        .status(500)
        .json({ message: "Error in invocation of API: /update" })
    }
    await details.updateMarks(email, updatedMarks, updateName);
};

const category = async (req, res) => {
    try {
        const categories = ['good', 'average', 'excellence'];
        const allStudents = {};

        for (const category of categories) {
            const students = await details.getStudentsByCategory(category);
            allStudents[category] = students;
        }

        const isEmpty = Object.values(allStudents).every((students) => students.length === 0);
        if (isEmpty) {
            return res.json({
                message: 'There are no students to fetch from the database',
                data: null,
            });
        }

        res.json({
            data: allStudents,
            message: 'Students data fetched successfully',
            code: 200,
        });
    } catch (err) {
       res
            .status(500)
            .json({ message: "Error in invocation of API: /category" })
    }
};

module.exports = {
    showStudents: showStudents,
    getOne: getOne,
    destroy: destroy,
    updateDetails: updateDetails,
    category: category,
    create: create
};
...........................................................response.js
module.exports = {
    studentsFetchedSuccessfully: {
      message: "Students name fetched successfully",
      code: 200,
    },
    noDataToFetch: {
      message: "There is no data to fetch from the database",
      data: null,
    },
    getOneStudent: {
        message: "Detail of the student fetched successfully.....",
        data: null,
      },
      noOneStudent: {
        message: "There is no student ID to get that students details",
        data: null,
      },
      deleted:{
        message: "Student's details has been Deleted successfully"
      },
      noDataToDelete:{
        message: "Please give the existing student's Id to delete"
      },
      catchOne:{
        message:"Error in invocation of API: /getOne"
      },
      noFirst:{
        message:"The firstName of the student cannot be empty"
      },
      noEmail:{
        Message: "The email-id of the student cannot be empty"
    }

}
...................................responseText.js
const { studentsDetails, Marks } = require('../models/db-details')
const { Sequelize } = require('sequelize')
const { Op } = require('sequelize');

//To Get data of all the students
const getStudents = async (res) => {
  try {
    let result = await (studentsDetails).findAll({
      include: Marks,
    })
    return JSON.parse(JSON.stringify(result));
  } catch (err) {
    res
      .status(500)
      .json({ message: "Error Occured on getStudents()" })
  }
}

//To Get data of a particular the students

const getStudentsById = async (id,res) => {
  try {
    let result = await studentsDetails.findOne({
      where: { id: id },
      include: [Marks],
    })
    return JSON.parse(JSON.stringify(result));
  } catch (err) {
    throw err;
  }
}

//To Create a new student details into the database

const createDetails = async (fname, lname, email, marks,res) => {
  try {
    const student = await studentsDetails.create({
      first_name: fname,
      last_name: lname,
      email_id: email
    });

    const newMarksData = await Marks.create({
      tamil: marks.tamil,
      english: marks.english,
      maths: marks.maths,
      student_id: student.id
    });
    return JSON.parse(JSON.stringify(newMarksData));
  } catch (err) {
    console.log("-------------",err)
    if (err.name === "SequelizeUniqueConstraintError") {
      throw new Error("Email should be unique.");
    }

    throw err;// Re-throw other errors
  }
};

//To Update the mark of the existing student by using the first name of the student

const updateMarks = async (email, updatedMarks, updateName,res) => {
  try {
    const student = await studentsDetails.findOne({
      where: { email_id: email },
    });
    if (student) {
      await studentsDetails.update(updateName, {
        where: { email_id: email },
      });
      await Marks.update(updatedMarks, {
        where: { student_id: student.id },
      });
    }
  } catch (err) {
    console.log("Error occurred on update()",err)
    // res
    //   .status(500)
    //   .json({ message: "Error Occured on updateMarks()" })
  }
}


const deleteById = async (id,res) => {
  try {
    let result = await studentsDetails.destroy({
      include: [
        {
          model: studentsDetails,
        },
      ],
      where: { id: id },
    })
    return JSON.parse(JSON.stringify(result));
  }
  catch (err) {
   throw err;
  }
}




const getStudentsByCategory = async (category,res) => {
  let minTotalMarks, maxTotalMarks;

  if (category === 'good') {
    minTotalMarks = 250;
    maxTotalMarks = 280;
  } else if (category === 'average') {
    minTotalMarks = 180;
    maxTotalMarks = 250;
  } else if (category === 'excellence') {
    minTotalMarks = 280;
    maxTotalMarks = 301; 
  } 

  try {
    const students = await Marks.findAll({
     
      include: [
        {
          model: studentsDetails,
        },
      ],
      attributes: [

        'student_id',
        [
          Sequelize.literal('SUM(tamil + english + maths)'),
          'total_mark',
        ],
      ],
      group: 'student_id',
      having: {
        total_mark: {
          [Op.gte]: minTotalMarks,
          [Op.lt]: maxTotalMarks,
        },
      },
    });
    const studentsWithCategory = students.map((student) => {
      return {
        ...student.toJSON(),
        category,
      };
    });

    return studentsWithCategory;
  } catch (err) {
    res
      .status(500)
      .json({ message: "Error Occured on getStudentsByCategory()" })
  }
};



module.exports = {
  getStudents: getStudents,
  getStudentsById: getStudentsById,
  deleteById: deleteById,
  getStudentsByCategory: getStudentsByCategory,
  createDetails: createDetails,
  updateMarks: updateMarks,

}
............................................operation.js
